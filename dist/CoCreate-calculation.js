(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["calculation"] = factory();
	else
		root["CoCreate"] = root["CoCreate"] || {}, root["CoCreate"]["calculation"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar CoCreateCalculation = {\n  init: function init() {\n    this.initCalculationElements();\n  },\n  initCalculationElements: function initCalculationElements(container) {\n    var mainContainer = container || document;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    }\n\n    var calculationElements = mainContainer.querySelectorAll('[data-calculation]') || [];\n    calculationElements = Array.from(calculationElements);\n\n    if (mainContainer != document && mainContainer.hasAttribute('data-calculation')) {\n      calculationElements.push(mainContainer);\n    }\n\n    for (var i = 0; i < calculationElements.length; i++) {\n      if (CoCreate.observer.getInitialized(calculationElements[i], \"calculation_init\")) {\n        return;\n      }\n\n      CoCreate.observer.setInitialized(calculationElements[i], \"calculation_init\");\n      this.initCalculationElement(calculationElements[i]);\n    }\n  },\n  initCalculationElement: function initCalculationElement(ele) {\n    var self = this;\n    var data_calculation = ele.getAttribute('data-calculation');\n    var ids = this.getIds(data_calculation);\n    console.log(data_calculation, ids);\n    var selectors = [];\n\n    for (var i = 0; i < ids.length; i++) {\n      var id = ids[i];\n      var input = null;\n\n      try {\n        input = document.querySelector(id);\n      } catch (error) {\n        input = null;\n      }\n\n      if (input) {\n        input.addEventListener('input', function () {\n          self.setCalcationResult(ele);\n        });\n        input.addEventListener('CoCreateInput-setvalue', function () {// self.setCalcationResult(ele)\n        });\n\n        if (input.hasAttribute('data-calculation')) {\n          input.addEventListener('changedCalcValue', function (e) {\n            self.setCalcationResult(ele);\n          });\n        }\n      } else {\n        //. add event of special operator\n        var selector = this.__getOperatorSelector(id);\n\n        if (selector) {\n          selectors.push(selector);\n        }\n      }\n    }\n\n    if (selectors.length > 0) {\n      document.addEventListener('changedCalcValue', function (e) {\n        var isMatched = false;\n        selectors.forEach(function (selector) {\n          if (e.target.matches(selector)) {\n            isMatched = true;\n            return;\n          }\n        });\n\n        if (isMatched) {\n          self.setCalcationResult(ele);\n        }\n      });\n    }\n  },\n  __getOperatorSelector: function __getOperatorSelector(value) {\n    var result = /SUM\\(\\s*([\\w\\W]+)\\s*\\)/g.exec(value);\n\n    if (result && result[1]) {\n      return result[1].trim();\n    }\n\n    return null;\n  },\n  calculationSpecialOperator: function calculationSpecialOperator(value) {\n    var self = this;\n    var sum = null;\n    var result = /SUM\\(\\s*([\\w\\W]+)\\s*\\)/g.exec(value);\n\n    if (result) {\n      var selector = result[1].trim();\n\n      if (value.trim().indexOf('SUM') == 0) {\n        var elements = document.querySelectorAll(selector);\n        sum = 0;\n        elements.forEach(function (el) {\n          var tmpValue = self.__getElementValue(el);\n\n          tmpValue = Number(tmpValue);\n\n          if (!Number.isNaN(tmpValue)) {\n            sum += tmpValue;\n          }\n        });\n      }\n    }\n\n    return sum;\n  },\n  setCalcationResult: function setCalcationResult(ele) {\n    var data_calculation = ele.getAttribute('data-calculation');\n    var calString = this.replaceIdWithValue(data_calculation);\n\n    if (calString) {\n      var result = calculation(calString);\n\n      if (ele.tagName == 'INPUT' || ele.tagName == 'TEXTAREA' || ele.tagName == 'SELECT') {\n        ele.value = result;\n\n        if (window.CoCreate.input.isUsageY(ele)) {\n          ele.value = \"\";\n          window.CoCreate.crdt.replaceText({\n            collection: ele.getAttribute('data-collection'),\n            document_id: ele.getAttribute('data-document_id'),\n            name: ele.getAttribute('name'),\n            value: result.toString()\n          });\n        } else {\n          window.CoCreate.input.save(ele);\n        } // window.CoCreate.input.save(ele);\n\n\n        if (CoCreate.floatingLabel) {\n          CoCreate.floatingLabel.update(ele, ele.value);\n        }\n      } else {\n        ele.innerHTML = result;\n        window.CoCreate.htmltags.saveContent(ele);\n      } //. set custom event\n\n\n      var event = new CustomEvent('changedCalcValue', {\n        bubbles: true\n      });\n      ele.dispatchEvent(event);\n    }\n  },\n  __getElementValue: function __getElementValue(element) {\n    if (element.tagName == 'INPUT' || element.tagName == 'TEXTAREA' || element.tagName == 'SELECT') {\n      return element.value;\n    } else {\n      return element.innerHTML;\n    }\n  },\n  replaceIdWithValue: function replaceIdWithValue(data_calculation) {\n    var ids = this.getIds(data_calculation);\n\n    for (var i = 0; i < ids.length; i++) {\n      var id = ids[i];\n      var input = null;\n\n      try {\n        input = document.querySelector(id);\n      } catch (error) {\n        input = null;\n      }\n\n      var value = null;\n\n      if (input) {\n        value = Number(this.__getElementValue(input));\n      } else {\n        value = this.calculationSpecialOperator(id);\n      }\n\n      if (value != null && !Number.isNaN(value)) {\n        data_calculation = data_calculation.replaceAll('{' + id + '}', value);\n      }\n    }\n\n    return data_calculation;\n  },\n  getIds: function getIds(string) {\n    var tmp = string;\n    var ids = [];\n    if (!tmp) return ids;\n\n    while (tmp.length > 0) {\n      var firstIndex = tmp.indexOf('{');\n      var secondIndex = tmp.indexOf('}', firstIndex);\n\n      if (firstIndex > -1 && secondIndex > -1) {\n        var id = tmp.substring(firstIndex + 1, secondIndex);\n        if (ids.indexOf(id) == -1) ids.push(id);\n        tmp = tmp.substring(secondIndex + 1);\n      } else {\n        return ids;\n      }\n    }\n\n    return ids;\n  }\n};\n\nfunction calculation(string) {\n  var index1, index2, index3, index4;\n  index1 = string.indexOf('+');\n  index2 = string.indexOf('-');\n  index3 = string.indexOf('*');\n  index4 = string.indexOf('/');\n\n  if (index1 > -1) {\n    var lStr = string.substr(0, index1);\n    var rStr = string.substr(index1 + 1);\n    return calculation(lStr) + calculation(rStr);\n  } else if (index2 > -1) {\n    var _lStr = string.substr(0, index2);\n\n    var _rStr = string.substr(index2 + 1);\n\n    return calculation(_lStr) - calculation(_rStr);\n  } else if (index3 > -1) {\n    var _lStr2 = string.substr(0, index3);\n\n    var _rStr2 = string.substr(index3 + 1);\n\n    return calculation(_lStr2) * calculation(_rStr2);\n  } else if (index4 > -1) {\n    var _lStr3 = string.substr(0, index4);\n\n    var _rStr3 = string.substr(index4 + 1);\n\n    var lValue = calculation(_lStr3);\n    var rValue = calculation(_rStr3);\n\n    if (rValue == 0) {\n      return 0;\n    } else {\n      return lValue / rValue;\n    }\n  } else {\n    var result = Number(string);\n\n    if (isNaN(result)) {\n      return 0;\n    } else {\n      return result;\n    }\n  }\n}\n\nCoCreateCalculation.init();\nCoCreate.observer.init({\n  name: 'CoCreateCalculationChangeValue',\n  observe: ['attributes'],\n  attributes: ['value'],\n  include: 'input',\n  callback: function callback(mutation) {\n    console.log('-----------------------------------------------------');\n    console.log(mutation.target);\n  }\n});\nCoCreate.observer.init({\n  name: 'CoCreateCalculationInit',\n  observe: ['subtree', 'childList'],\n  include: '[data-calculation]',\n  callback: function callback(mutation) {\n    CoCreateCalculation.initCalculationElements(mutation.target);\n  }\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (CoCreateCalculation);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ })

/******/ })["default"];
});